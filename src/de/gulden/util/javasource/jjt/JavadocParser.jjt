/**
* Parser declaration JavadocParser for JJTree / JavaCC.
*
* This is a LL(k) parser for analysing Javadoc 1.1 comments.
*
* Compilation steps:
*
* 1. JJTree: JavadocParser.jjt  -->  JavadocParser.jj
* 2. JavaCC: JavadocParser.jj   -->  JavadocParser.java
* 3. javac:  JavadocParser.java -->  JavadocParser.class
*
* Copyright (C) Jens Gulden 2001.
*
* This is licensed under the GNU General Public License (GPL).
**/

options
{
  LOOKAHEAD=1;
  JAVA_UNICODE_ESCAPE=true;
  STATIC=false;
  MULTI=false;
  ERROR_REPORTING=true;
}

PARSER_BEGIN(JavadocParser)

package de.gulden.util.javasource.jjt;

import de.gulden.util.javasource.SourceParser;
import java.io.*;

public class JavadocParser {

    /**
     * Parses Javadoc comments.
     * This method is reentrant.
     */
    public static Node parse(String s) throws ParseException {
        return parse(new ByteArrayInputStream(s.getBytes()));
    }

    /**
     * Parses Javadoc comments.
     * This method is reentrant.
     */
    public static Node parse(java.io.InputStream in) throws ParseException {
        Node node;
        JavadocParser parser=new JavadocParser(in);
        parser.CompilationUnit();
        node=parser.jjtree.rootNode();
        //showTree(node,System.out);
        return node;
    }

/*
    public static void showTree(Node node,PrintStream out) {
        showTree(node,out,0);
    }

    private static void showTree(Node node,PrintStream out,int depth) {
        out.println(SourceParser.repeat("  ",depth)+JavadocParserTreeConstants.jjtNodeName[node.getId()]);
        for (int i=0;i<node.jjtGetNumChildren();i++) {
            Node n=node.jjtGetChild(i);
            showTree(n,out,depth+1);
        }
    }
*/
/*
    public void jjtreeOpenNodeScope(Node n) {
        n.setStartToken(getToken(1));
    }

    public void jjtreeCloseNodeScope(Node n) {
        n.setEndToken(getToken(1));
    }
*/
}

PARSER_END(JavadocParser)



/* WHITE SPACE */

/* EOL is significant, so not part of SKIP */
SKIP :
{
  " "
| "\r"
| "\t"
}

TOKEN :
{
  < EOL: "\n" >
| < STAR: "*" >
| < SLASH: "/" >
| < DOCSTART: "/*" ("*")+ >
| < DOCEND: "*/" >

| < WORD: ~["@","*","/"," ","\t","\r","\n"] ( ~[" ","\t","\r","\n"] )* >

/*
| < WORD: ( <LETTER> )+ >
| < #LETTER:
      [
        "a"-"z",
        "A"-"Z",
        ".",",",";",":","!","?","-","_","+","=","#","'","<",">","\"",
        "0"-"9"
      ]
  >
*/

| < TAG_AUTHOR: "@author" >
| < TAG_DEPRECATED: "@deprecated" >
| < TAG_EXCEPTION: "@exception" >
| < TAG_PARAM: "@param" >
| < TAG_RETURN: "@return" >
| < TAG_SEE: "@see" >
| < TAG_SINCE: "@since" >
| < TAG_THROWS: "@throws" >
| < TAG_VERSION: "@version" >
| < TAG_ID: "@id" > // this is used in the original java 1.1.8 sources and included here for compatibility
}



/*****************************************
 * The Javadoc Grammar starts here.      *
 *****************************************/

/*
 * Javadoc-comment structuring syntax follows.
 */
void CompilationUnit() :
{}
{
  DocStart()
  Description()
  Tags()
  DocEnd()
  <EOF>
}

void DocStart() #void :
{}
{
  <DOCSTART>
}

void DocEnd() #void :
{}
{
  ( LOOKAHEAD( <EOL> ( <STAR> )* <DOCEND> )
    <EOL> )?
  ( LOOKAHEAD(1)
    <STAR> )*
  <DOCEND>
}

void Description() :
{}
{
  ( FirstLine() )?
  MoreLines()
}

void Tags() #void :
{}
{
  (
    LOOKAHEAD( <EOL> ( <STAR> )* ( <TAG_AUTHOR> | <TAG_DEPRECATED> | <TAG_EXCEPTION> | <TAG_THROWS> | <TAG_PARAM> | <TAG_RETURN> | <TAG_SINCE> | <TAG_SEE> | <TAG_VERSION> | <TAG_ID> ) )
    Tag()
  )*
}

void Line() :
{}
{
  ( Word() )*
}

void FirstLine() #Line(true) :
{}
{
  ( Word() )+
}

void MoreLines() #void :
{}
{
  ( LOOKAHEAD( <EOL> (<STAR>)* ( <WORD> | <EOL> ) )
    NextLine() )*
}

void NextLine() #void :
{}
{
  <EOL>
  (
//    LOOKAHEAD( (<STAR>)* ( <WORD> | <EOL> ) )
    LOOKAHEAD(1)
    <STAR>
  )*
  Line()
}

void Word() :
{
  Token t;
}
{
  t =  <WORD> { jjtThis.setValue(t.toString()); }
}


void Tag() :
{
  Token t;
}
{
  <EOL> ( <STAR> )*
  (
    ( t = <TAG_AUTHOR> )
  | ( t = <TAG_DEPRECATED> )
  | ( t = <TAG_EXCEPTION> TagItem() )
  | ( t = <TAG_THROWS> TagItem() )
  | ( t = <TAG_PARAM> TagItem() )
  | ( t = <TAG_RETURN> )
  | ( t = <TAG_SINCE> )
  | ( t = <TAG_SEE> )
  | ( t = <TAG_VERSION> )
  | ( t = <TAG_ID> )
  ) { jjtThis.setValue(t.toString()); }
  Line()
  MoreLines()
}

void TagItem() :
{}
{
  Word()
}