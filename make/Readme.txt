------------------------------------------------------------------------------
- BeautyJ - Customizable Java Source Code Transformer                        -
- & Sourclet API with Java Source API                                        -
-                                                                            -
- Version 1.1                                                                -
-                                                                            -
- Copyright (c) Jens Gulden, www.jensgulden.de.                              -
-                                                                            -
- Distributed under the GNU General Public License (GPL).                    -
- This software comes with NO WARRANTY, see file licence.txt for details.    -
------------------------------------------------------------------------------

Overview
--------
BeautyJ parses Java source code and transforms it to different output formats.
Java source files can automatically be normalized to a clean structured format
("beautified") or be converted to an XML representation for external
transformation.
Javadoc-comments may be auto-generated, based on semantic information derived
from identifier names. A standard project header can be attached to each file.
The output is fully customizable through the Sourclet API.
The Java Source API provides access to Java source code from any Java program,
by parsing .java-files and representing their content in an object-oriented
structure.
BeautyJ is not primarily made for cleaning the code-lines of method
implementations (although it provides some options for simple cleaning of code
bodies). It beautifies the outer structure of class declarations, by sorting
methods into public/protected/private order, normalize field and method
declarations to a well-readable format, and auto-generate Javadoc-comment
fragments.


Running BeautyJ
---------------
There are several alternative ways to start up BeautyJ:

1.Use the shell wrapper script beautyj.sh (on Unix-like systems) or
beautyj.bat (on Windows). These scripts are located in the bin/ directory of
the BeautyJ distribution. Example: 
beautyj -d=./src/beautified ...
If you installed BeautyJ into a directory different from /usr/java/beautyJ-1_1
(on Linux systems) or c:\java\beautyJ-1_1 (on Windows systems), please 
manually adopt the paths set in the scripts to your configuration once before
using BeautyJ for the first time.

2.Assuming the classpath is already set to contain the BeautyJ classes (e.g.
by including beautyj.jar in the classpath), start the Java interpreter with
the wrapper class 'beautyj'. This is placed in the root package of the 
classpath (that means, no leading 'package.subpackage...' is required for
calling it).
Example:
java beautyj -d=./src/beautified ...

3.The beautyj.jar archive contains a manifest-file with information about the
main class to invoke, so BeautyJ can be started up using the -jar parameter of
the Java environment:
java -jar [$BEAUTYJ_HOME/]beautyj.jar -d=./src/beautified ...

4.BeautyJ can also be used as an ANT task to be included in ANT build scripts.
See the ANT Task documentation.

5. Each of the above ways of invoking can make use of the '-gui'-option. Using
this option, BeautyJ starts up with a graphical user interface, which allows
you to edit all available options and start code beautification by hitting the
'Run'-button. (Note that this is not the most sophisticated graphical user
interface because it is automatically generated by the application framework
BeautyJ is built on. However, it provides a fully graphical overview
of all configurable options, which makes using BeautyJ much easier when you
are not yet experienced in using it.)

For more detailed documentation, refer to file doc/beautyJ.html.

---

Files contained in the distribution archive:

###ANT-INSERT###