/*
 * Parser declaration for SourceParser for JJTree / JavaCC.
 *
 * Compilation steps:
 *
 * 1. JJTree: Parser.jjt  -->  Parser.jj
 * 2. JavaCC: Parser.jj   -->  Parser.java
 * 3. javac:  Parser.java -->  Parser.class
 *
 * This is a modified version of the original Java 1.1 grammar specification
 * (see comment below).
 *
 * All identifiers of the form '_IDENTIFIER' (i.e., starting with an underscore
 * and then followed by uppercase letters) mark modifications of the original.
 *
 * Copyright (c) Jens Gulden 2001-2004.
 *
 * This is licensed under the GNU General Public License (GPL).
 */

options
{
  JAVA_UNICODE_ESCAPE=true; // but unicode-resolving manually disabled to get raw source (+workaround for single-char unicode)

  STATIC=false;
  MULTI=false;
  NODE_PREFIX="AST_";
  NODE_DEFAULT_VOID=true;
  NODE_SCOPE_HOOK=true;
  LOOKAHEAD=1;
  CHOICE_AMBIGUITY_CHECK=2;
  OTHER_AMBIGUITY_CHECK=1;

  BUILD_TOKEN_MANAGER=true;
  ERROR_REPORTING=true;
  BUILD_PARSER=true;
  COMMON_TOKEN_ACTION=false;

  USER_TOKEN_MANAGER=false;
  USER_CHAR_STREAM=false;
  UNICODE_INPUT=false;
  IGNORE_CASE=false;
  FORCE_LA_CHECK=false;
  SANITY_CHECK=true;

  DEBUG_PARSER=false;
  DEBUG_LOOKAHEAD=false;
  DEBUG_TOKEN_MANAGER=false;
}


PARSER_BEGIN(Parser)

package de.gulden.util.javasource.jjt;

import de.gulden.util.javasource.SourceParser;
import java.io.*;

public class Parser {

    /**
     * Parses Java source code.
     * This method is reentrant.
     * @param source may describe a source file path, zip-entry etc.
     */
    public static Node parse(java.io.InputStream in,String source) throws ParseException {
        Node node;
        Parser parser=new Parser(in,source);
        parser.CompilationUnit();
        node=parser.jjtree.rootNode();
        //showTree(node,System.out);
        return node;
    }

    //-----------------------------

    protected String source;

    protected Parser(InputStream in,String source) {
        this(in);
        this.source=source;
    }

    public static void showTree(Node node,PrintStream out) {
        showTree(node,out,0);
    }

    private static void showTree(Node node,PrintStream out,int depth) {
        out.println(SourceParser.repeat("  ",depth)+node.toString());
        for (int i=0;i<node.jjtGetNumChildren();i++) {
            Node n=node.jjtGetChild(i);
            showTree(n,out,depth+1);
        }
    }

    public void jjtreeOpenNodeScope(Node n) {
        n.setTextImage(jj_input_stream.text_image);
        n.setStartToken(getToken(1));
        n.setSource(source);
    }

    public void jjtreeCloseNodeScope(Node n) {
        n.setEndToken(getToken(1));
    }
}

PARSER_END(Parser)


/*
 *
 * The following is modified from the original Java 1.1 grammar specification.
 *
 * Some modifications:
 * - added several '(";")*' to allow more semicolons that originally (some
 *   original Java sources use this, which have been used for testing)
 * - added handling of JDK 1.4's 'assert'-keyword (taken from Sreenivasa Viswanadha's
 *   JDK 1.5-grammar).
 * - added handling of JDK 1.2's 'strictfp'-keyword (which most likely is only needed
 *   for parsing Java's own language API sources in class java.lang.Math).    
 *
 * Author: Jens Gulden
 *
 * ---------------------------------------------------------------------------
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Author: Sriram Sankar
 * Date: 3/5/97
 *
 */

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

/********************************************
<_PURE>
SPECIAL_TOKEN :
{
  < _PURE : ( ~[ "{" , "}" ] )* > : DEFAULT
}
*/

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  < FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}


/***

|
  < _BLOCKSTART:
    "{" ( ~[ "}" ] )*
  >
|
  < _BLOCKEND:
    "}"
  >



|
  < _RAW:
    ( ~[ "", "{" , "}" ] )*
  >
***/



/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

void CompilationUnit() #_SOURCE(true) :
{}
{
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
  <EOF>
}

void PackageDeclaration() #_PACKAGE(true) :
{}
{
  "package" Name() ";"
}

void ImportDeclaration() #_IMPORT(true) :
{}
{
  "import" Name() [ "." "*" #_PACKAGEIMPORT(true) ] ";"
}

void TypeDeclaration() :
{}
{
  LOOKAHEAD( ( "abstract" | "final" | "strictfp" | "public" )* "class" )
  ClassDeclaration()
|
  InterfaceDeclaration()
|
  ";"
}


/*
 * Declaration syntax follows.
 */

void ClassDeclaration() #_CLASS(true) :
{}
{
  ( _ABSTRACT() | _FINAL() | _STRICTFP() | _PUBLIC() )* #_MODIFIER(true)
  UnmodifiedClassDeclaration()
}

void UnmodifiedClassDeclaration() :
{}
{
  "class" _IDENTIFIER() #_NAME(true) [ "extends" Name() #_SUPERCLASS(true) ] [ "implements" _INTERFACELIST() ]
  ClassBody()
}

void ClassBody() :
{}
{
  "{" ( ClassBodyDeclaration() )* "}"
}

void NestedClassDeclaration() #_INNERCLASS(true) :
{}
{
  ( _STATIC() | _ABSTRACT() | _FINAL() | _STRICTFP() | _PUBLIC() | _PROTECTED() | _PRIVATE() )* #_MODIFIER(true)
  UnmodifiedClassDeclaration()
}

void ClassBodyDeclaration() :
{}
{
  LOOKAHEAD(2)
  Initializer() (";")*
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "strictfp" | "public" | "protected" | "private" )* "class" )
  NestedClassDeclaration() (";")*
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "interface" )
  NestedInterfaceDeclaration() (";")*
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
  ConstructorDeclaration() (";")*
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration() (";")*
|
  FieldDeclaration() (";")*
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "strictfp" | "native" | "synchronized" )*
  ResultType() <IDENTIFIER> "("
}

void InterfaceDeclaration() #_INTERFACE(true) :
{}
{
  ( _ABSTRACT() | _PUBLIC() )* #_MODIFIER(true)
  UnmodifiedInterfaceDeclaration()
}

void NestedInterfaceDeclaration() #_INNERINTERFACE(true) :
{}
{
  ( _STATIC() | _ABSTRACT() | _FINAL() | _PUBLIC() | _PROTECTED() | _PRIVATE() )* #_MODIFIER(true)
  UnmodifiedInterfaceDeclaration()
}

void UnmodifiedInterfaceDeclaration() :
{}
{
  "interface" _IDENTIFIER() #_NAME(true) [ "extends" _INTERFACELIST() ]
  "{" ( InterfaceMemberDeclaration() )* "}"
}

void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( ( "static" | "abstract" | "final" | "strictfp" | "public" | "protected" | "private" )* "class" )
  NestedClassDeclaration() (";")*
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" )* "interface" )
  NestedInterfaceDeclaration() (";")*
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration() (";")*
|
  FieldDeclaration() (";")*
}

void FieldDeclaration() #_FIELD(true) :
{}
{
  ( _PUBLIC() | _PROTECTED() | _PRIVATE() | _STATIC() | _FINAL() | _TRANSIENT() | _VOLATILE() | _STRICTFP() )* #_MODIFIER(true)
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"
}

void VariableDeclarator() #_FIELDVAR(true) :
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() #_CODE(true) ]
}

void VariableDeclaratorId() :
{}
{
  _IDENTIFIER() #_NAME(true) _ARRAYDECLARATOR()
}

void VariableInitializer() :
{}
{
  ArrayInitializer()
|
  Expression()
}

void ArrayInitializer() :
{}
{
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"
}

void MethodDeclaration() #_METHOD(true) :
{}
{
  ( _PUBLIC() | _PROTECTED() | _PRIVATE() | _STATIC() | _ABSTRACT() | _FINAL() | _STRICTFP() | _NATIVE() | _SYNCHRONIZED() )* #_MODIFIER(true)
  ResultType() MethodDeclarator() [ "throws" NameList() #_THROWS(true) ]
  ( Block() #_CODE(true) | ";" )
}

void MethodDeclarator() :
{}
{
  _IDENTIFIER() #_NAME(true) FormalParameters() _ARRAYDECLARATOR()
}

void FormalParameters() :
{}
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void FormalParameter() #_PARAMETER(true) :
{}
{
  [ "final" #_FINAL(true) ] Type() VariableDeclaratorId()
}

void ConstructorDeclaration() #_CONSTRUCTOR(true) :
{}
{
  [ _PUBLIC() | _PROTECTED() | _PRIVATE() ] #_MODIFIER(true)
  _IDENTIFIER() #_NAME(true) FormalParameters() [ "throws" NameList() #_THROWS(true) ]
  ("{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}") #_CODE(true)
}

void ExplicitConstructorInvocation() :
{}
{
  LOOKAHEAD("this" Arguments() ";")
  "this" Arguments() ";"
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" Arguments() ";"
}

void Initializer() #_INITIALIZER(true) :
{}
{
  [ "static" #_STATIC(true) ] Block() #_CODE(true)
}


/*
 * Type, name and expression syntax follows.
 */

void Type() #_TYPE(true) :
{}
{
  ( PrimitiveType() | Name() ) _ARRAYDECLARATOR()
}

void PrimitiveType() #_NAME(true) :
{}
{
  _PRIMITIVE()
}

void _PRIMITIVE() #_PRIMITIVE(true) :
{
  Token t;
}
{
  t = "boolean" { jjtThis.setValue(t.toString()); }
|
  t = "char" { jjtThis.setValue(t.toString()); }
|
  t = "byte" { jjtThis.setValue(t.toString()); }
|
  t = "short" { jjtThis.setValue(t.toString()); }
|
  t = "int" { jjtThis.setValue(t.toString()); }
|
  t = "long" { jjtThis.setValue(t.toString()); }
|
  t = "float" { jjtThis.setValue(t.toString()); }
|
  t = "double" { jjtThis.setValue(t.toString()); }

}

void ResultType() :
{}
{
  "void" #_TYPE(true)
|
  Type()
}

void Name() #_NAME(true) :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{}
{
  _IDENTIFIER()
  ( LOOKAHEAD(2) _DOT() _IDENTIFIER()
  )*
}

void NameList() :
{}
{
  Name()
  ( "," Name()
  )*
}

void _INTERFACELIST() :
{}
{
  Name() #_IMPLEMENTS(true)
  ( "," Name() #_IMPLEMENTS(true)
  )*
}

void _ARRAYDECLARATOR() :
{}
{
  ( ( "[" "]" ) #_ISARRAY(true) )*
}

void _IDENTIFIER() #_IDENTIFIER :
{
  Token t;
}
{
  t =  <IDENTIFIER> { jjtThis.setValue(t.toString()); }
}

void _DOT() #_DOT :
{}
{
  "."
}

void _PUBLIC() #_PUBLIC :
{}
{
  "public"
}

void _PROTECTED() #_PROTECTED :
{}
{
  "protected"
}

void _PRIVATE() #_PRIVATE :
{}
{
  "private"
}

void _STATIC() #_STATIC :
{}
{
  "static"
}

void _ABSTRACT() #_ABSTRACT :
{}
{
  "abstract"
}

void _SYNCHRONIZED() #_SYNCHRONIZED :
{}
{
  "synchronized"
}

void _FINAL() #_FINAL :
{}
{
  "final"
}

void _TRANSIENT() #_TRANSIENT :
{}
{
  "transient"
}

void _VOLATILE() #_VOLATILE :
{}
{
  "volatile"
}

void _STRICTFP() #_STRICTFP :
{}
{
  "strictfp"
}

void _NATIVE() #_NATIVE :
{}
{
  "native"
}


/*
 * Expression syntax follows.
 */

void Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{}
{
  ConditionalExpression()
  [
    AssignmentOperator() Expression()
  ]
}

void AssignmentOperator() :
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
}

void ConditionalExpression() :
{}
{
  ConditionalOrExpression() [ "?" Expression() ":" ConditionalExpression() ]
}

void ConditionalOrExpression() :
{}
{
  ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression() :
{}
{
  InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*
}

void InclusiveOrExpression() :
{}
{
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression() :
{}
{
  AndExpression() ( "^" AndExpression() )*
}

void AndExpression() :
{}
{
  EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression() :
{}
{
  InstanceOfExpression() ( ( "==" | "!=" ) InstanceOfExpression() )*
}

void InstanceOfExpression() :
{}
{
  RelationalExpression() [ "instanceof" Type() ]
}

void RelationalExpression() :
{}
{
  ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
}

void ShiftExpression() :
{}
{
  AdditiveExpression() ( ( "<<" | ">>" | ">>>" ) AdditiveExpression() )*
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression() :
{}
{
  ( "+" | "-" ) UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression() :
{}
{
  "++" PrimaryExpression()
}

void PreDecrementExpression() :
{}
{
  "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus() :
{}
{
  ( "~" | "!" ) UnaryExpression()
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
|
  PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

void PostfixExpression() :
{}
{
  PrimaryExpression() [ "++" | "--" ]
}

void CastExpression() :
{}
{
  LOOKAHEAD("(" PrimitiveType())
  "(" Type() ")" UnaryExpression()
|
  "(" Type() ")" UnaryExpressionNotPlusMinus()
}

void PrimaryExpression() :
{}
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix() :
{}
{
  Literal()
|
  "this"
|
  "super" "." <IDENTIFIER>
|
  "(" Expression() ")"
|
  AllocationExpression()
|
  LOOKAHEAD( ResultType() "." "class" )
  ResultType() "." "class"
|
  Name()
}

void PrimarySuffix() :
{}
{
  LOOKAHEAD(2)
  "." "this"
|
  LOOKAHEAD(2)
  "." AllocationExpression()
|
  "[" Expression() "]"
|
  "." <IDENTIFIER>
|
  Arguments()
}

void Literal() :
{}
{
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  NullLiteral()
}

void BooleanLiteral() :
{}
{
  "true"
|
  "false"
}

void NullLiteral() :
{}
{
  "null"
}

void Arguments() :
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList() :
{}
{
  Expression() ( "," Expression() )*
}

void AllocationExpression() :
{}
{
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimsAndInits()
|
  "new" Name()
    (
      ArrayDimsAndInits()
    |
      Arguments() [ ClassBody() ]
    )
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() :
{}
{
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" )*
|
  ( "[" "]" )+ ArrayInitializer()
}


/*
 * Statement syntax follows.
 */

void Statement() :
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
|
  AssertStatement()
|
  Block()
|
  EmptyStatement()
|
  StatementExpression() ";"
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()
}

void AssertStatement():
{}
{
  "assert" Expression() [ ":" Expression() ] ";"
}

void LabeledStatement() :
{}
{
  <IDENTIFIER> ":" Statement()
}

void Block() :
{}
{
  "{" ( BlockStatement() )* "}"
}

/****************************
void _CODE() #_CODE(true) :
{}
{
  "{" ( _RAW() | _CODE() )* "}"
}

void _RAW() #_RAW(true) :
{
  Token t;
}
{
<_PURE> { jjtThis.setValue(t.toString()); }
}
*************************/

void BlockStatement() :
{}
{
  LOOKAHEAD([ "final" ] Type() <IDENTIFIER>)
  LocalVariableDeclaration() ";"
|
  Statement()
|
  UnmodifiedClassDeclaration()
|
  UnmodifiedInterfaceDeclaration()
}

void LocalVariableDeclaration() :
{}
{
  [ "final" ] Type() VariableDeclarator() ( "," VariableDeclarator() )*
}

void EmptyStatement() :
{}
{
  ";"
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    "++"
  |
    "--"
  |
    AssignmentOperator() Expression()
  ]
}

void SwitchStatement() :
{}
{
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void SwitchLabel() :
{}
{
  "case" Expression() ":"
|
  "default" ":"
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void WhileStatement() :
{}
{
  "while" "(" Expression() ")" Statement()
}

void DoStatement() :
{}
{
  "do" Statement() "while" "(" Expression() ")" ";"
}

void ForStatement() :
{}
{
  "for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")" Statement()
}

void ForInit() :
{}
{
  LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList() :
{}
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void BreakStatement() :
{}
{
  "break" [ <IDENTIFIER> ] ";"
}

void ContinueStatement() :
{}
{
  "continue" [ <IDENTIFIER> ] ";"
}

void ReturnStatement() :
{}
{
  "return" [ Expression() ] ";"
}

void ThrowStatement() :
{}
{
  "throw" Expression() ";"
}

void SynchronizedStatement() :
{}
{
  "synchronized" "(" Expression() ")" Block()
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "try" Block()
  ( "catch" "(" FormalParameter() ")" Block() )*
  [ "finally" Block() ]
}
